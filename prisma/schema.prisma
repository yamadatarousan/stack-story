// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  repositories  Repository[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Repository {
  id          String     @id @default(cuid())
  name        String
  fullName    String
  url         String
  description String?
  language    String?
  stars       Int?
  forks       Int?
  userId      String
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  analyses    Analysis[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@unique([userId, fullName])
}

model Analysis {
  id           String     @id @default(cuid())
  repositoryId String
  repository   Repository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  techStack    Json       // 技術スタック情報
  dependencies Json       // 依存関係情報
  structure    Json       // プロジェクト構造
  articles     Article[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Article {
  id         String     @id @default(cuid())
  title      String
  content    String     @db.Text
  markdown   String     @db.Text
  published  Boolean    @default(false)
  analysisId String
  analysis   Analysis   @relation(fields: [analysisId], references: [id], onDelete: Cascade)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}